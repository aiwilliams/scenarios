== Scenarios

In a nutshell, scenarios are a drop in replacement for YAML fixtures. Instead of encouraging you to create a mindless amount raw data in the form of YAML, scenarios encourage you to create code that populates your tables with the appropriate data.

=== Usage

Scenarios should be placed in the spec/scenarios directory of your Rails project. Scenario file names should always end in "_scenario.rb" and classes should always end in "Scenario".

A simple scenario looks like this

  class PersonScenario < Scenario::Base
  
    def load
      create_record(
        :person,
        :name => 'Long John',
        :username => 'longjohn',
        :password => 'password'
      )
    end
  
  end

The simplest scenario only needs to implement one method: the <tt>load</tt> method. Inside the load method you can insert records using the Scenario::Base#create_record instance method. The first parameter is the name of the table to insert the record into and the second parameter is for attributes.

To use this scenario in a spec you would do:

  describe Person do
    scenario :person
  
    ... examples here ...
  
  end



-----

There are a number of choices when looking to replace YAML fixtures. Why
should you consider this one? That can be answered indirectly by considering
the philosophy behind the decisions we make during the construction of this
tool.

But first, what is the purpose of any database fixture framework?

Second, what are the goals or values that a database fixture framework should
have?

Finally, what is the driving philosophy behind this implementation of a
database fixture framework?


USAGE
------------------------------------------------------
Where your scenarios should be placed - <root>/spec/scenarios


RUNNING TESTS
------------------------------------------------------
You will need to create a mysql database named 'scenarios_spec'.